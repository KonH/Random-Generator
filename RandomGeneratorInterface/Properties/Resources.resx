<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btAdd" xml:space="preserve">
    <value>Добавить</value>
  </data>
  <data name="btDelete" xml:space="preserve">
    <value>Удалить</value>
  </data>
  <data name="btProcess" xml:space="preserve">
    <value>Распределить</value>
  </data>
  <data name="lbAnswers" xml:space="preserve">
    <value>Варианты ответа:</value>
  </data>
  <data name="lbQuestion" xml:space="preserve">
    <value>Вопрос:</value>
  </data>
  <data name="lvName" xml:space="preserve">
    <value>Название</value>
  </data>
  <data name="menuFile" xml:space="preserve">
    <value>Файл</value>
  </data>
  <data name="menuFileExit" xml:space="preserve">
    <value>Выйти</value>
  </data>
  <data name="menuFileLoad" xml:space="preserve">
    <value>Загрузить</value>
  </data>
  <data name="menuFileNew" xml:space="preserve">
    <value>Новый</value>
  </data>
  <data name="menuFileSave" xml:space="preserve">
    <value>Сохранить</value>
  </data>
  <data name="menuGenerate" xml:space="preserve">
    <value>Генерация</value>
  </data>
  <data name="menuGenFile" xml:space="preserve">
    <value>В файл</value>
  </data>
  <data name="menuGenOutput" xml:space="preserve">
    <value>С выводом</value>
  </data>
  <data name="menuHelp" xml:space="preserve">
    <value>Помощь</value>
  </data>
  <data name="menuHelpAbout" xml:space="preserve">
    <value>О программе</value>
  </data>
  <data name="menuHelpHelp" xml:space="preserve">
    <value>Помощь</value>
  </data>
  <data name="msgHelp" xml:space="preserve">
    <value>     Программа позволяет генерировать ответы на заданные вопросы с указанной вероятностью. Для добавления нового вопроса используйте кнопку 'Добавить' в левом нижнем углу.
    Новый вопрос отобразится в списке слева. При выборе вопроса возможно указать его текст и добавить новые варианты ответа (кнопка 'Добавить' под текстом вопроса).
    Вероятность выпадения каждого ответа указывается справа от ответа. Имеется возможность указать вероятности равномерно (кнопка 'Распределить').
    Для получения ответов воспользуйтесь пунктом меню 'Генерация', который позволяет выбрать, нужно ли проводить генерацию в файл или выводить напрямую.
    Вопросы можно сохранить в файл и использовать в дальнейшем (пункты меню 'Сохранить' и 'Загрузить').
    
    Горячие клавиши:
    
    Ctrl + Q - добавить вопрос
    Ctrl + F - добавить вариант ответа
    Ctrl + G - удалить вариант ответа
    Ctrl + D - удалить выбранный вопрос
    Ctrl + R - распределить шансы равномерно
    Ctrl + W - генерация в файл
    Ctrl + E - генерация с выводом</value>
  </data>
  <data name="msgHelpCaption" xml:space="preserve">
    <value>Помощь</value>
  </data>
  <data name="msgSaveFile" xml:space="preserve">
    <value>Сохранить файл при выходе?</value>
  </data>
  <data name="msgSaveFileCaption" xml:space="preserve">
    <value>Сохранение файла</value>
  </data>
  <data name="msgAbout" xml:space="preserve">
    <value>Разработчик:
- Константин 'KonH' Хитрых (konh@yandex.ru)
Среда разработки:
- Microsoft Visual Studio 2010
Язык программирования:
- C#
Framework:
- .NET Framework 4.0
Интерфейс:
- WPF
Версия:
- </value>
  </data>
  <data name="msgAboutCaption" xml:space="preserve">
    <value>О программе</value>
  </data>
  <data name="msgFileSave" xml:space="preserve">
    <value>Вопросы сохранены в файле:</value>
  </data>
  <data name="msgQuestions" xml:space="preserve">
    <value>Вопросы:</value>
  </data>
  <data name="msgQuestionsNotFound" xml:space="preserve">
    <value>Вопросов не найдено.</value>
  </data>
  <data name="menuFileLanguage" xml:space="preserve">
    <value>Язык интерфейса</value>
  </data>
  <data name="menuFileLanguageEnglish" xml:space="preserve">
    <value>Английский</value>
  </data>
  <data name="menuFileLanguageRussian" xml:space="preserve">
    <value>Русский</value>
  </data>
</root>